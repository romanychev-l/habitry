import logging
from typing import Optional

from aiogram import Bot, types
from aiogram.types import WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from bot.config_data.config import db

logger = logging.getLogger(__name__)

class NotificationManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        self.jobs = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∂–æ–±–æ–≤ –ø–æ user_id

    async def get_random_quote(self, language: str) -> str:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
            quotes = list(db.quotes.aggregate([
                {"$match": {language: {"$exists": True}}},
                {"$sample": {"size": 1}}
            ]))
            if quotes:
                quote_obj = quotes[0][language]
                quote_text = quote_obj['text']
                quote_author = quote_obj['autor']
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ü–∏—Ç–∞—Ç–æ–π –∏ –∞–≤—Ç–æ—Ä–æ–º
                if quote_author and quote_author != "null":
                    return f"{quote_text}\n\n@{quote_author}"
                return quote_text
                
            raise Exception("No quotes found")
        except Exception as e:
            logger.error(f"Failed to get random quote: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Ü–∏—Ç–∞—Ç—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if language == 'ru':
                return "üåü –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!"
            return "üåü Every day is a new opportunity to become better!"

    async def send_notification(self, user_id: int, language: str):
        try:
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(
                    text="Open",
                    web_app=WebAppInfo(url="https://lenichev.space/ht/")
                    # url="https://lenichev.space/ht/"
                )
            )

            quote = await self.get_random_quote(language)
            await self.bot.send_message(user_id, quote, reply_markup=builder.as_markup())
            logger.info(f"Notification sent to user {user_id}")
        except Exception as e:
            logger.error(f"Failed to send notification to user {user_id}: {e}")

    async def add_user_notification(
        self, 
        user_id: int, 
        time: str, 
        timezone: str, 
        language: str
    ) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        :param time: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
        :param timezone: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param language: –ö–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        """
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ
            self.remove_user_notification(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            hour, minute = map(int, time.split(':'))
            job = self.scheduler.add_job(
                self.send_notification,
                CronTrigger(hour=hour, minute=minute, timezone=timezone),
                args=[user_id, language],
                id=str(user_id),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
                replace_existing=True
            )
            self.jobs[user_id] = job
            logger.info(f"Added notification schedule for user {user_id} at {time} {timezone}")
            return True
        except Exception as e:
            logger.error(f"Failed to add notification for user {user_id}: {e}")
            return False

    def remove_user_notification(self, user_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            if user_id in self.jobs:
                self.jobs[user_id].remove()
                del self.jobs[user_id]
                logger.info(f"Removed notification schedule for user {user_id}")
                return True
            return False
        except Exception as e:
            logger.error(f"Failed to remove notification for user {user_id}: {e}")
            return False

    async def load_existing_notifications(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            users = list(db.users.find({
                "notifications_enabled": True,
                "notification_time": {"$exists": True, "$ne": ""}
            }))
            
            for user in users:
                await self.add_user_notification(
                    user["telegram_id"],
                    user["notification_time"],
                    user.get("timezone", "UTC"),
                    user.get("language_code", "en")
                )
            
            logger.info("Existing notifications loaded successfully")
        except Exception as e:
            logger.error(f"Failed to load existing notifications: {e}")

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            self.load_existing_notifications,
            'interval',
            minutes=5,
            id='check_notifications_updates'
        )
        self.scheduler.start()
        logger.info("Notification scheduler started") 