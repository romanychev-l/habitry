import logging
from typing import Dict, List
from datetime import datetime, timedelta, timezone
from bson import ObjectId

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from bot.config_data.config import db

logger = logging.getLogger(__name__)

class CountManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UTC –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler = AsyncIOScheduler(timezone='UTC')

    async def calculate_daily_rewards(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∏ –∑–∞ –¥–µ–Ω—å"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è –∏ –æ—Ç—Å—Ç—É–ø–∞–µ–º –Ω–∞ 36 —á–∞—Å–æ–≤, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å "–≤—á–µ—Ä–∞—à–Ω–∏–π" –¥–µ–Ω—å
            # –¥–ª—è –≤—Å–µ—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ (UTC+14 -> UTC-12 = 26 —á–∞—Å–æ–≤ —Ä–∞–∑–Ω–∏—Ü—ã, –ø–ª—é—Å –∑–∞–ø–∞—Å)
            check_date = (datetime.now(timezone.utc) - timedelta(hours=36)).date()
            logger.info(f"Calculating rewards for date: {check_date} (UTC)")
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_transactions = {}  # {telegram_id: {'sent': [], 'received': []}}
            
            unfulfilled_habits = get_unfulfilled_habits_with_stake(check_date)
            
            # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –¥–∞–ª—å—à–µ...
            logger.info(f"unfulfilled_habits: {unfulfilled_habits}")
            enriched_habits = []
            for habit in unfulfilled_habits:
                followers_data = []
                habit_name = habit.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                for follower_id in habit['followers']:
                    follower_habit = db.habits.find_one({"_id": ObjectId(follower_id)})
                    logger.info(f"follower_habit: {follower_habit}")
                    logger.info(str(habit['_id']) in follower_habit['followers'])
                    logger.info(is_habit_completed(check_date, follower_habit['telegram_id'], follower_habit['_id']))
                    if (follower_habit and 
                        str(habit['_id']) in follower_habit['followers'] and 
                        is_habit_completed(check_date, follower_habit['telegram_id'], follower_habit['_id'])):
                        followers_data.append([
                            follower_habit['_id'],
                            follower_habit['telegram_id'],
                            follower_habit['stake'],
                            follower_habit.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        ])

                enriched_habit = habit
                enriched_habit['followers'] = followers_data
                enriched_habits.append(enriched_habit)

            logger.info(f"enriched_habits: {enriched_habits}")

            winnings = {}
            for habit in enriched_habits:
                sum_stakes_of_followers = sum(stake for _, _, stake, _ in habit['followers'])
                user_balance = db.users.find_one({"telegram_id": habit['telegram_id']})['balance']
                stake_of_owner = min(habit['stake'], user_balance)
                logger.info(f"stake_of_owner: {stake_of_owner}")
                logger.info(f"sum_stakes_of_followers: {sum_stakes_of_followers}")
                logger.info(f"user_balance: {user_balance}")

                # –ï—Å–ª–∏ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è —Å—Ç–∞–≤–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if stake_of_owner <= 0:
                    continue

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∏–≤—ã—á–∫–∏
                if habit['telegram_id'] not in user_transactions:
                    user_transactions[habit['telegram_id']] = {'sent': [], 'received': []}

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏—Å–∞–Ω–∏–∏ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞
                user_transactions[habit['telegram_id']]['sent'].append({
                    'amount': stake_of_owner,
                    'habit_name': habit.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                })

                db.users.update_one(
                    {"telegram_id": habit['telegram_id']}, 
                    {"$inc": {"balance": -stake_of_owner}}
                )

                if sum_stakes_of_followers <= 0:
                    db.settings.update_one(
                        {"_id": "system_settings"},
                        {"$inc": {"balance": stake_of_owner}},
                        upsert=True
                    )
                    continue

                total_distributed = 0
                for follower in habit['followers']:
                    follower_id, follower_telegram_id, follower_stake, follower_habit_name = follower
                    if follower_stake <= 0:
                        continue
                    
                    win_amount = int((stake_of_owner / sum_stakes_of_followers) * follower_stake)
                    total_distributed += win_amount
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    if follower_telegram_id not in user_transactions:
                        user_transactions[follower_telegram_id] = {'sent': [], 'received': []}
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–∏–∏
                    user_transactions[follower_telegram_id]['received'].append({
                        'amount': win_amount,
                        'from_habit': habit.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        'for_habit': follower_habit_name
                    })
                    
                    if follower_telegram_id not in winnings:
                        winnings[follower_telegram_id] = win_amount
                    else:
                        winnings[follower_telegram_id] += win_amount

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ settings.balance
                remaining = stake_of_owner - total_distributed
                if remaining > 0:
                    db.settings.update_one(
                        {"_id": "system_settings"},
                        {"$inc": {"balance": remaining}},
                        upsert=True
                    )

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for telegram_id, transactions in user_transactions.items():
                if telegram_id in winnings:
                    db.users.update_one(
                        {"telegram_id": telegram_id}, 
                        {"$inc": {"balance": winnings[telegram_id]}}
                    )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message_parts = []
                
                if transactions['sent']:
                    sent_text = "üì§ –°–ø–∏—Å–∞–Ω–∏—è:\n"
                    for tx in transactions['sent']:
                        sent_text += f"- {tx['amount']} —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –ø—Ä–∏–≤—ã—á–∫—É '{tx['habit_name']}'\n"
                    message_parts.append(sent_text)
                
                if transactions['received']:
                    received_text = "üì• –ü–æ–ª—É—á–µ–Ω–æ:\n"
                    for tx in transactions['received']:
                        received_text += f"- {tx['amount']} —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç '{tx['from_habit']}' –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ '{tx['for_habit']}'\n"
                    message_parts.append(received_text)
                
                if message_parts:
                    total_sent = sum(tx['amount'] for tx in transactions['sent'])
                    total_received = sum(tx['amount'] for tx in transactions['received'])
                    summary = f"üí∞ –ò—Ç–æ–≥–æ: -{total_sent} / +{total_received} —Ç–æ–∫–µ–Ω–æ–≤"
                    message_parts.append(summary)
                    
                    full_message = "\n\n".join(message_parts)
                    try:
                        await self.bot.send_message(
                            telegram_id,
                            f"–û—Ç—á—ë—Ç –æ –¥–≤–∏–∂–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ {check_date}:\n\n{full_message}"
                        )
                    except Exception as e:
                        logger.error(f"Failed to send message to user {telegram_id}: {e}")

            logger.info("Daily rewards calculated and distributed successfully")
        except Exception as e:
            logger.error(f"Failed to calculate daily rewards: {e}")

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:05 UTC
        self.scheduler.add_job(
            self.calculate_daily_rewards,
            CronTrigger(hour=10, minute=5),
            id='calculate_daily_rewards'
        )
        self.scheduler.start()
        logger.info("Count manager scheduler started - will run daily at 10:05 UTC")

def is_habit_completed(date, telegram_id, habit_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    """
    date_str = date.strftime("%Y-%m-%d")
    logger.info(f"Checking habit completion for date {date_str}, user {telegram_id}, habit {habit_id}")
    
    history = db['history'].find_one({
        "telegram_id": telegram_id,
        "date": date_str,
        "habits": {
            "$elemMatch": {
                "habit_id": habit_id,
                "done": True
            }
        }
    })
    logger.info(f"history: {history}")
    
    return history is not None

def get_unfulfilled_habits_with_stake(check_date):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–æ —Å—Ç–∞–≤–∫–æ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    """
    check_weekday = check_date.isoweekday() - 1
    logger.info(f"Checking for unfulfilled habits on weekday: {check_weekday}, date: {check_date}")
    habits = list(db.habits.find({
        "stake": {"$gt": 0},
        "days": check_weekday
    }))
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–≤—ã—á–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    return [
        habit for habit in habits 
        if not is_habit_completed(check_date, habit['telegram_id'], habit['_id'])
    ]
    