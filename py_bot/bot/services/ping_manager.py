import logging
import asyncio
from datetime import datetime
from aiogram import Bot
from bson.objectid import ObjectId
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.config_data.config import config_settings, db

logger = logging.getLogger(__name__)

class PingManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = db
        self.scheduler = AsyncIOScheduler()

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏–Ω–≥–æ–≤."""
        self.scheduler.add_job(
            self._process_pending_pings,
            'interval',
            minutes=1,
            id='process_pending_pings'
        )
        self.scheduler.start()
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∏–Ω–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∏–Ω–≥–æ–≤."""
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∏–Ω–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _process_pending_pings(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∏."""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∏–Ω–≥–æ–≤")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–∏–Ω–≥–∏
            pending_pings = list(self.db.pings.find({"status": "pending"}))
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_pings)} –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–∏–Ω–≥–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∏–Ω–≥
            for ping in pending_pings:
                await self._send_ping(ping)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏–Ω–≥–æ–≤: {e}")

    async def _send_ping(self, ping):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–∏–Ω–≥."""
        try:
            # –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            sender_habit_id = ping.get("habit_id")
            sender_username = ping.get("sender_username", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            follower_id = ping.get("follower_id")
            
            if not follower_id or not sender_habit_id:
                logger.error(f"–í –ø–∏–Ω–≥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è: {ping}")
                await self._update_ping_status(ping, "error")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≤—ã—á–∫—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –Ω–∞ –ø—Ä–∏–≤—ã—á–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            follower_habit = self.db.habits.find_one({
                "telegram_id": follower_id,
                "followers": sender_habit_id
            })
            
            if not follower_habit:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è {follower_id}, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è –Ω–∞ –ø—Ä–∏–≤—ã—á–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {sender_habit_id}")
                await self._update_ping_status(ping, "error")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            follower_habit_title = follower_habit.get("title", "–ø—Ä–∏–≤—ã—á–∫–∞")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = (
                f"üí° <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{sender_username} –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É:\n"
                f"<b>{follower_habit_title}</b>\n\n"
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=follower_id,
                text=message_text,
                parse_mode="HTML"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∏–Ω–≥–∞
            await self._update_ping_status(ping, "sent")
            logger.info(f"–ü–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {follower_id} –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ '{follower_habit_title}'")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏–Ω–≥–∞ {ping.get('_id')}: {e}")
            await self._update_ping_status(ping, "error")
    
    async def _update_ping_status(self, ping, status):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∏–Ω–≥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            if status == "sent":
                # –ï—Å–ª–∏ –ø–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –±–∞–∑—ã
                self.db.pings.delete_one({"_id": ping.get("_id")})
                logger.info(f"–ü–∏–Ω–≥ {ping.get('_id')} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
            else:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.db.pings.update_one(
                    {"_id": ping.get("_id")},
                    {"$set": {"status": status}}
                )
                logger.info(f"–°—Ç–∞—Ç—É—Å –ø–∏–Ω–≥–∞ {ping.get('_id')} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏–Ω–≥–∞ {ping.get('_id')}: {e}") 