import logging
from datetime import datetime, timedelta
from aiogram import Router, F, types, Bot
from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram_dialog import DialogManager, StartMode
from fluentogram import TranslatorRunner

from bot.config_data.config import db
from bot.states.start import StartSG

other_router = Router()


class Actions(StatesGroup):
    base_state = State()


@other_router.message(Command("stats"))
async def cmd_stats(msg: Message):
    if msg.from_user.id != 248603604:  # –í–∞—à ID
        logging.info(f"Unauthorized stats access attempt from user {msg.from_user.id}")
        return
        
    try:
        logging.info("Starting stats collection...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        try:
            db['users'].database.client.server_info()
            logging.info("Successfully connected to MongoDB")
        except Exception as e:
            logging.error(f"MongoDB connection error: {e}")
            await msg.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = list(db['users'].find({}))
        logging.info(f"Found {len(users)} users in database")
        
        if not users:
            await msg.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        total_users = len(users)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏
        all_habits = []
        for user in users:
            if "habits" in user:
                all_habits.extend(user["habits"])
        
        total_habits = len(all_habits)
        
        # –°—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        now = datetime.utcnow()
        yesterday = now - timedelta(days=1)
        completed_today = sum(1 for habit in all_habits 
                            if habit.get("last_click_date") and 
                            datetime.fromisoformat(habit["last_click_date"].replace('Z', '+00:00')) > yesterday)
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        total_completions = sum(habit.get("score", 0) for habit in all_habits)
        
        logging.info(f"Stats collected: users={total_users}, habits={total_habits}, "
                    f"completed_today={completed_today}, total_completions={total_completions}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Habitry:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìù –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {total_habits}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ 24 —á–∞—Å–∞: {completed_today}\n"
            f"üèÜ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {total_completions}\n"
        )
        
        await msg.answer(stats_message)
        
    except Exception as e:
        logging.error(f"Error in stats command: {e}")
        await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@other_router.message(Actions.base_state)
async def registration_start(msg: Message, state: FSMContext, i18n: TranslatorRunner, dialog_manager: DialogManager):
    # await state.update_data(status='employee')
    
    await msg.answer(i18n.message.ex_one(), reply_markup=ReplyKeyboardRemove())


@other_router.message(Command("buy"))
async def cmd_buy(msg: Message, bot: Bot):
    await bot.send_invoice(
        chat_id=msg.chat.id,
        title="1 Telegram Stars",
        description="–ü–æ–∫—É–ø–∫–∞ Stars –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–Ω–∞–ª–∞",
        payload="stars_1",
        provider_token="",  # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è Stars
        currency="XTR",
        prices=[
            types.LabeledPrice(
                label="1 Stars",
                amount=1  # 100 Stars = 10000
            )
        ],
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query
@other_router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery, bot: Bot):
    try:
        await bot.answer_pre_checkout_query(
            pre_checkout_query_id=pre_checkout_query.id,
            ok=True
        )
        logging.info(f"Pre-checkout query processed: {pre_checkout_query.id}")
    except Exception as e:
        logging.error(f"Error in pre_checkout_query: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@other_router.message(F.successful_payment)
async def successful_payment(message: types.Message, i18n: TranslatorRunner):
    print(message)
    try:
        user_id = message.from_user.id
        result = db.users_collection.update_one(
            {"telegram_id": user_id},
            {"$set": {"credit": 0}}
        )
        
        if result.modified_count > 0:
            await message.answer(
                f"{i18n.message.payment_success()} {message.successful_payment.total_amount} Stars"
            )
        else:
            logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_id}")
            # await message.answer(i18n.message.error_payment())
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {e}")
        await message.answer(i18n.message.error_payment())


