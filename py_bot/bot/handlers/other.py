import logging
from datetime import datetime, timedelta
from aiogram import Router, F, types, Bot
from aiogram.types import Message, ReplyKeyboardRemove, InputTextMessageContent, InlineQuery, InlineQueryResultArticle
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram_dialog import DialogManager
from fluentogram import TranslatorRunner
import uuid
from aiogram.utils.keyboard import InlineKeyboardBuilder


from bot.config_data.config import db, config_settings

other_router = Router()


class Actions(StatesGroup):
    base_state = State()


@other_router.message(Command("stats"))
async def cmd_stats(msg: Message):
    if msg.from_user.id != 248603604:  # –í–∞—à ID
        logging.info(f"Unauthorized stats access attempt from user {msg.from_user.id}")
        return
        
    try:
        logging.info("Starting stats collection...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        try:
            db['users'].database.client.server_info()
            logging.info("Successfully connected to MongoDB")
        except Exception as e:
            logging.error(f"MongoDB connection error: {e}")
            await msg.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = db['users'].count_documents({})
        logging.info(f"Found {total_users} users in database")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏
        habits = list(db['habits'].find({}))
        total_habits = len(habits)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        now = datetime.utcnow()
        today = now.date()
        yesterday = (now - timedelta(days=1)).date()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        today_docs = list(db['history'].find({"date": today.isoformat()}))
        completed_today = sum(len(doc.get('habits', [])) for doc in today_docs)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        yesterday_docs = list(db['history'].find({"date": yesterday.isoformat()}))
        completed_yesterday = sum(len(doc.get('habits', [])) for doc in yesterday_docs)
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        all_history_docs = list(db['history'].find({}))
        total_completions = sum(len(doc.get('habits', [])) for doc in all_history_docs)
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
        total_links = sum(len(habit.get("followers", [])) for habit in habits)
        
        logging.info(f"Stats collected: users={total_users}, habits={total_habits}, "
                    f"completed_today={completed_today}, completed_yesterday={completed_yesterday}, "
                    f"total_completions={total_completions}, total_links={total_links}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Habitry:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìù –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {total_habits}\n"
            f"üîó –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø—Ä–∏–≤—ã—á–∫–∞–º–∏: {total_links}\n"
            f"üëç –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏–≤—ã—á–µ–∫ —Å–µ–≥–æ–¥–Ω—è: {completed_today}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏–≤—ã—á–µ–∫ –≤—á–µ—Ä–∞: {completed_yesterday}\n"
            f"üèÜ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {total_completions}\n"
        )
        
        await msg.answer(stats_message)
        
    except Exception as e:
        logging.error(f"Error in stats command: {e}")
        await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    
@other_router.message(Command("today_list_users"))
async def cmd_today_list_users(msg: Message):
    if msg.from_user.id != 248603604:  # –í–∞—à ID
        logging.info(f"Unauthorized stats access attempt from user {msg.from_user.id}")
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        now = datetime.utcnow()
        today = now.date()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_docs = list(db['history'].find({"date": today.isoformat()}))
        
        if not today_docs:
            await msg.answer("–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –ø—Ä–∏–≤—ã—á–∫–∏")
            return
            
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user_stats = {}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        for doc in today_docs:
            user = db['users'].find_one({"telegram_id": doc.get('telegram_id')})
            if user:
                username = user.get('username', 'unknown')
                user_stats[username] = len(doc.get('habits', []))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        
        for username, count in sorted(user_stats.items(), key=lambda x: x[1], reverse=True):
            profile_link = f"t.me/{config_settings.BOT_USERNAME}/app?startapp=profile_{username}"
            message += f"@{username}: {count} –ø—Ä–∏–≤—ã—á–µ–∫\n"
            message += f"–ü—Ä–æ—Ñ–∏–ª—å: {profile_link}\n\n"
            
        await msg.answer(message)
        
    except Exception as e:
        logging.error(f"Error in today_list_users command: {e}")
        await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@other_router.message(Actions.base_state)
async def registration_start(msg: Message, state: FSMContext, i18n: TranslatorRunner, dialog_manager: DialogManager):
    # await state.update_data(status='employee')
    
    await msg.answer(i18n.message.ex_one(), reply_markup=ReplyKeyboardRemove())


# @other_router.message(Command("buy"))
# async def cmd_buy(msg: Message, bot: Bot):
#     await bot.send_invoice(
#         chat_id=msg.chat.id,
#         title="1 Telegram Stars",
#         description="–ü–æ–∫—É–ø–∫–∞ Stars –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–Ω–∞–ª–∞",
#         payload="stars_1",
#         provider_token="",  # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è Stars
#         currency="XTR",
#         prices=[
#             types.LabeledPrice(
#                 label="1 Stars",
#                 amount=1  # 100 Stars = 10000
#             )
#         ],
#         need_name=False,
#         need_phone_number=False,
#         need_email=False,
#         need_shipping_address=False,
#         is_flexible=False
#     )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query
# @other_router.pre_checkout_query()
# async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery, bot: Bot):
#     try:
#         await bot.answer_pre_checkout_query(
#             pre_checkout_query_id=pre_checkout_query.id,
#             ok=True
#         )
#         logging.info(f"Pre-checkout query processed: {pre_checkout_query.id}")
#     except Exception as e:
#         logging.error(f"Error in pre_checkout_query: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
# @other_router.message(F.successful_payment)
# async def successful_payment(message: types.Message, i18n: TranslatorRunner):
#     print(message)
#     try:
#         user_id = message.from_user.id
#         stars_amount = message.successful_payment.total_amount
#         will_tokens = stars_amount * 10  # 1 Stars = 10 WILL

#         # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         user_record = db.users.find_one({"telegram_id": user_id}) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ users_collection –Ω–∞ users
#         current_balance = user_record.get('balance', 0) if user_record else 0
#         new_balance = current_balance + will_tokens

#         result = db.users.update_one( # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ users_collection –Ω–∞ users
#             {"telegram_id": user_id},
#             {"$set": {"balance": new_balance}}
#         )
        
#         if result.modified_count > 0:
#             await message.answer(
#                 f"{i18n.message.payment_success()} {stars_amount} Stars\n"
#                 f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {will_tokens} WILL"
#             )
#         else:
#             # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
#             if not user_record:
#                  db.users.insert_one({
#                      "telegram_id": user_id,
#                      "username": message.from_user.username or f"user_{user_id}",
#                      "balance": will_tokens,
#                      "created_at": datetime.utcnow()
#                  })
#                  logging.info(f"New user created via payment: {user_id}")
#                  await message.answer(
#                      f"{i18n.message.payment_success()} {stars_amount} Stars\n"
#                      f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {will_tokens} WILL"
#                  )
#             else:
#                  logging.error(f"Failed to update balance for user {user_id}")
#                  # await message.answer(i18n.message.error_payment()) # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —è–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {e}")
#         await message.answer(i18n.message.error_payment())


@other_router.message(Command("send"))
async def cmd_send_will(msg: Message, i18n: TranslatorRunner, bot: Bot):
    try:
        args = msg.text.split()
        logging.info(f"Received send command with args: {args}")
        if len(args) != 3:
            await msg.answer(i18n.send.usage())
            return

        _, recipient_username, amount_str = args
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        recipient_username = recipient_username.lstrip('@')

        try:
            amount = int(amount_str)
            if amount <= 0:
                raise ValueError("Amount must be positive")
        except ValueError:
            await msg.answer(i18n.send.invalid_amount())
            return

        sender_id = msg.from_user.id
        sender = db.users.find_one({"telegram_id": sender_id})

        if not sender:
            logging.error(f"Sender user not found: {sender_id}")
            await msg.answer(i18n.send.sender_not_found())
            return

        sender_balance = sender.get('balance', 0)

        if sender_balance < amount:
            await msg.answer(i18n.send.insufficient_funds(balance=sender_balance))
            return

        recipient = db.users.find_one({"username": recipient_username})

        if not recipient:
            await msg.answer(i18n.send.recipient_not_found(username=recipient_username))
            return
            
        recipient_id = recipient.get("telegram_id")
        if sender_id == recipient_id:
            await msg.answer(i18n.send.send_to_self())
            return

        recipient_balance = recipient.get('balance', 0)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        db.users.update_one({"telegram_id": sender_id}, {"$inc": {"balance": -amount}})
        db.users.update_one({"telegram_id": recipient_id}, {"$inc": {"balance": amount}})
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é)
        db.transactions.insert_one({
            "sender_id": sender_id,
            "recipient_id": recipient_id,
            "recipient_username": recipient_username,
            "amount": amount,
            "timestamp": datetime.utcnow()
        })

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        # await msg.answer(i18n.send.success_sender(amount=amount, username=recipient_username)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º send-success-sender
        success_message = i18n.get("send-success-sender", amount=amount, username=recipient_username)
        await msg.answer(success_message)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        try:
            sender_username = msg.from_user.username or f"user_{sender_id}"
            # recipient_text = i18n.send.success_recipient(amount=amount, username=sender_username) # –ò—Å–ø–æ–ª—å–∑—É–µ–º send-success-recipient
            recipient_text = i18n.get("send-success-recipient", amount=amount, username=sender_username)
            
            await bot.send_message(
                chat_id=recipient_id,
                text=recipient_text
            )
        except Exception as e:
            logging.error(f"Failed to notify recipient {recipient_id}: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

        logging.info(f"WILL transfer: {sender_id} -> {recipient_id} ({recipient_username}), amount: {amount}")

    except Exception as e:
        logging.exception(f"Error in /send command: {e}")
        await msg.answer(i18n.error.generic())

@other_router.message(Command("add_quote"))
async def cmd_add_quote(msg: Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if msg.from_user.id != 248603604:  # –í–∞—à ID
        logging.info(f"Unauthorized quote addition attempt from user {msg.from_user.id}")
        return
        
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines = msg.text.split('\n')
        if len(lines) < 2:
            await msg.answer(
                "–§–æ—Ä–º–∞—Ç:\n"
                "/add_quote\n"
                "ru\n"
                "–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
                "–ê–≤—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
                "en\n"
                "Text in English\n"
                "Author (optional)"
            )
            return
            
        quote_doc = {}
        current_lang = None
        current_text = None
        current_autor = None
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–æ–º–∞–Ω–¥–æ–π
        for line in lines[1:]:
            line = line.strip()
            if not line:
                continue
                
            if line in ['ru', 'en']:
                # –ï—Å–ª–∏ –±—ã–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                if current_lang and current_text:
                    quote_doc[current_lang] = {
                        "text": current_text,
                        "autor": current_autor  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–º –∞–≤—Ç–æ—Ä–∞
                    }
                current_lang = line
                current_text = None
                current_autor = None
            elif current_lang and not current_text:
                current_text = line
            elif current_lang and current_text:
                current_autor = line
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        if current_lang and current_text:
            if current_lang not in quote_doc:
                quote_doc[current_lang] = {
                    "text": current_text,
                    "autor": current_autor
                }
        
        if not quote_doc:
            raise ValueError("No valid quotes found in message")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        result = db.quotes.insert_one(quote_doc)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
        
        await msg.answer(response)
        
    except Exception as e:
        logging.error(f"Error adding quote: {e}")
        await msg.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")


@other_router.callback_query(F.data == "received")
async def callback_query_received(callback_query: types.CallbackQuery):
    logging.info(f"Callback query: {callback_query.data}")
    await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ WILL", show_alert=True)


@other_router.callback_query(F.data)
async def callback_query_send_will(callback_query: types.CallbackQuery):
    logging.info(f"Callback query: {callback_query.data}")
    user_id = callback_query.from_user.id
    
    data = callback_query.data.split()
    logging.info(f"Data: {data}")
    amount = data[1]
    recipient_username = data[2]
    sender_id = data[3]

    sender_balance = db.users.find_one({"telegram_id": sender_id}).get("balance", 0)

    if sender_balance < amount:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
    
    recipient = db.users.find_one({"username": recipient_username}).get("telegram_id", 0)

    if recipient == None:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        
    db.users.update_one({"telegram_id": sender_id}, {"$inc": {"balance": -amount}})
    db.users.update_one({"telegram_id": recipient}, {"$inc": {"balance": amount}})

    await callback_query.answer()

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü–æ–ª—É—á–µ–Ω–æ",
        callback_data="received")
    )
    await callback_query.e.answer(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {amount} WILL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient_username}", 
        reply_markup=builder.as_markup()
    )

@other_router.inline_query()
async def send_will(inline_query: InlineQuery):

    user_id = inline_query.from_user.id
    inline_query_text = inline_query.query
    inline_query_array = inline_query_text.split()

    user_balance = db.users.find_one({"telegram_id": user_id}).get("balance", 0)

    title = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å "
    description = ""
    callback_data = f"send_{inline_query_text.replace(' ', '_')}_{user_id}"
    # callback_data = "received"
    logging.info(f"Callback data: {callback_data}")
    print(callback_data)

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü–æ–ª—É—á–∏—Ç—å",
        callback_data=callback_data)
    )


    if len(inline_query_array) == 0:
        description = "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ WILL"
    elif len(inline_query_array) == 1:
        try:
            amount = int(inline_query_array[0])
            if amount <= 0:
                description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
            else:
                title = f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å {amount} WILL"
                description = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {inline_query_array[0]} WILL\n–£–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
        except Exception as e:
            description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"

    elif len(inline_query_array) == 2:
        try:
            amount = int(inline_query_array[0])
            logging.info(f"Amount: {amount}")
            if amount <= 0:
                description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
            else:
                user_balance = db.users.find_one({"telegram_id": user_id}).get("balance", 0)
                recipient = db.users.find_one({"username": inline_query_array[1][1:]})

                if user_balance < amount:
                    description = f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {amount} WILL"
                elif recipient == None:
                    description = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{inline_query_array[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                else:
                    description = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {amount} WILL\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {inline_query_array[1]}"
                    title = f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å {amount} WILL"
        except Exception as e:
            print(e)
            description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"

    else:
        description = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥"



    result = [InlineQueryResultArticle(
        id=str(uuid.uuid4()),
        title=title,
        description=description,
        input_message_content=InputTextMessageContent(
            message_text=f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_balance} WILL"
        ),
        reply_markup=builder.as_markup()
    )]
    
    await inline_query.answer(result, is_personal=True)
