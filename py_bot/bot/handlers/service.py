import logging
from datetime import datetime, timedelta
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from fluentogram import TranslatorRunner

from bot.config_data.config import db, config_settings

service_router = Router()

@service_router.message(Command("stats"))
async def cmd_stats(msg: Message):
    if msg.from_user.id != 248603604:  # –í–∞—à ID
        logging.info(f"Unauthorized stats access attempt from user {msg.from_user.id}")
        return
        
    try:
        logging.info("Starting stats collection...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        try:
            db['users'].database.client.server_info()
            logging.info("Successfully connected to MongoDB")
        except Exception as e:
            logging.error(f"MongoDB connection error: {e}")
            await msg.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = db['users'].count_documents({})
        logging.info(f"Found {total_users} users in database")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏
        habits = list(db['habits'].find({}))
        total_habits = len(habits)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        now = datetime.utcnow()
        today = now.date()
        yesterday = (now - timedelta(days=1)).date()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        today_docs = list(db['history'].find({"date": today.isoformat()}))
        completed_today = sum(len(doc.get('habits', [])) for doc in today_docs)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        yesterday_docs = list(db['history'].find({"date": yesterday.isoformat()}))
        completed_yesterday = sum(len(doc.get('habits', [])) for doc in yesterday_docs)
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        all_history_docs = list(db['history'].find({}))
        total_completions = sum(len(doc.get('habits', [])) for doc in all_history_docs)
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
        total_links = sum(len(habit.get("followers", [])) for habit in habits)
        
        logging.info(f"Stats collected: users={total_users}, habits={total_habits}, "
                    f"completed_today={completed_today}, completed_yesterday={completed_yesterday}, "
                    f"total_completions={total_completions}, total_links={total_links}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Habitry:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìù –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {total_habits}\n"
            f"üîó –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø—Ä–∏–≤—ã—á–∫–∞–º–∏: {total_links}\n"
            f"üëç –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏–≤—ã—á–µ–∫ —Å–µ–≥–æ–¥–Ω—è: {completed_today}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏–≤—ã—á–µ–∫ –≤—á–µ—Ä–∞: {completed_yesterday}\n"
            f"üèÜ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {total_completions}\n"
        )
        
        await msg.answer(stats_message)
        
    except Exception as e:
        logging.error(f"Error in stats command: {e}")
        await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    
@service_router.message(Command("today_list_users"))
async def cmd_today_list_users(msg: Message):
    if msg.from_user.id != 248603604:  # –í–∞—à ID
        logging.info(f"Unauthorized stats access attempt from user {msg.from_user.id}")
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        now = datetime.utcnow()
        today = now.date()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_docs = list(db['history'].find({"date": today.isoformat()}))
        
        if not today_docs:
            await msg.answer("–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –ø—Ä–∏–≤—ã—á–∫–∏")
            return
            
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user_stats = {}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        for doc in today_docs:
            user = db['users'].find_one({"telegram_id": doc.get('telegram_id')})
            if user:
                username = user.get('username', 'unknown')
                user_stats[username] = len(doc.get('habits', []))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        
        for username, count in sorted(user_stats.items(), key=lambda x: x[1], reverse=True):
            profile_link = f"t.me/{config_settings.BOT_USERNAME}/app?startapp=profile_{username}"
            message += f"@{username}: {count} –ø—Ä–∏–≤—ã—á–µ–∫\n"
            message += f"–ü—Ä–æ—Ñ–∏–ª—å: {profile_link}\n\n"
            
        await msg.answer(message)
        
    except Exception as e:
        logging.error(f"Error in today_list_users command: {e}")
        await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@service_router.message(Command("add_will"))
async def cmd_add_will(msg: Message, i18n: TranslatorRunner):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if msg.from_user.id != 248603604:  # –í–∞—à ID
        logging.info(f"Unauthorized add_will attempt from user {msg.from_user.id}")
        return
        
    try:
        args = msg.text.split()
        if len(args) != 2:
            await msg.answer(i18n.add.will_usage())
            return
            
        try:
            amount = int(args[1])
            if amount <= 0:
                await msg.answer(i18n.add.will_invalid_amount())
                return
        except ValueError:
            await msg.answer(i18n.add.will_invalid_format())
            return
            
        admin_id = msg.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_user = db.users.find_one({"telegram_id": admin_id})
        
        if not admin_user:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            db.users.insert_one({
                "telegram_id": admin_id,
                "username": msg.from_user.username or f"admin_{admin_id}",
                "balance": amount,
                "created_at": datetime.utcnow()
            })
            await msg.answer(i18n.add.will_admin_created(amount=amount))
            logging.info(f"Created admin profile with {amount} WILL")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            current_balance = admin_user.get('balance', 0)
            new_balance = current_balance + amount
            
            db.users.update_one(
                {"telegram_id": admin_id}, 
                {"$inc": {"balance": amount}}
            )
            
            await msg.answer(i18n.add.will_balance_updated(amount=amount, balance=new_balance))
            logging.info(f"Added {amount} WILL to admin balance. New balance: {new_balance}")
            
    except Exception as e:
        logging.error(f"Error in add_will command: {e}")
        await msg.answer(i18n.add.will_error(error=str(e)))